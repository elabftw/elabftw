<?php

/**
 * @package   Elabftw\Elabftw
 * @author    Nicolas CARPi <nico-git@deltablot.email>
 * @copyright 2012 Nicolas CARPi
 * @license   https://www.gnu.org/licenses/agpl-3.0.html AGPL-3.0
 * @see       https://www.elabftw.net Official website
 */

declare(strict_types=1);

namespace Elabftw\Exceptions;

use Elabftw\Elabftw\App;
use Elabftw\Enums\Messages;
use Exception;
use Psr\Log\LoggerInterface;
use Symfony\Component\HttpFoundation\Response;

/**
 * Errors generated by eLabFTW App itself
 */
class AppException extends Exception
{
    protected Messages $error = Messages::GenericError;

    public function __construct(?string $message = null, int $code = 0, ?Exception $previous = null)
    {
        $message ??= $this->error->toHuman();
        //$code === 0 ? $this->code = $this->error->toHttpCode() : $this->code = $code;
        parent::__construct($message, $code, $previous);
    }

    public function getResponseFromException(App $app): Response
    {
        $this->emitLog($app->Log, $app->Session->get('userid') ?? -1);
        $template = 'error.html';
        $renderArr = array('error' => $this->getMessage());
        $Response = new Response();
        $Response->setContent($app->render($template, $renderArr));
        // use explicit toHttpCode here as we could have a code that is different from an http one
        $Response->setStatusCode($this->error->toHttpCode());
        return $Response;
    }

    /*
    protected function getErrorMessage(): string
    {
        return $this->error->toHuman();
    }
     */

    protected function emitLog(LoggerInterface $logger, int $userid): void
    {
        $logger->info('', array(array('userid' => $userid), array('AppException', $this)));
    }
}
