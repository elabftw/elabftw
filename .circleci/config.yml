# circle ci config for elabftw
# https://www.elabftw.net
version: 2.1
# code coverage orb
orbs:
  codecov: codecov/codecov@3.2.2
jobs:
  build:
    working_directory: ~/elabftw/elabftw
    parallelism: 1
    shell: /bin/bash --login
    # The following configuration line tells CircleCI to use the specified docker image as the runtime environment for you job.
    # For more information on choosing an image (or alternatively using a
    # VM instead of a container) see https://circleci.com/docs/2.0/executor-types/
    # To see the list of pre-built images that CircleCI provides for most common languages see
    # https://circleci.com/docs/2.0/circleci-images/
    docker:
      - image: cimg/base:current
      # ignore login credentials for now
      #  auth:
      #    username: nicolascarpi
      #    password: $DOCKERHUB_PULL_TOKEN
    environment:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
      COMPOSE_DOCKER_CLI_BUILD: 1
    steps:
      - checkout
      - setup_remote_docker:
          version: docker27
          # docker_layer_caching: true # DLC will explicitly cache layers here and try to avoid rebuilding.
          # docker_layer_caching is behind a paywall
      - run:
          name: Prepare docker-compose.yml
          # Don't bind mount here, files are copied. See circleci.Dockerfile
          # It is NOT possible to bind mount with the docker container in circleci!
          # See: https://circleci.com/docs/building-docker-images#mounting-folders
          # first backslash enables different delimiter than slash
          command: |
            sed -i '\#volumes:#D' tests/docker-compose.yml
            sed -i '\#- \.\.:/elabftw#D' tests/docker-compose.yml
      - run:
          name: Prepare CI for cypress
          command: |
            mkdir -p cypress/{screenshots,videos}
            sed -i 's/elab.local:3148/elabtmp/g' tests/docker-compose.yml
            sed -i 's/elab.local/elabtmp/g' tests/docker-compose.yml
            sed -i 's/elab.local:3148/elabtmp/g' cypress.config.ts
            sed -i 's/elab.local:3148/elabtmp/g' src/tools/populate-config.yml.dist
      - run:
          name: Build elabtmp image and start containers
          command: |
            docker build -q --no-cache -t elabtmp -f tests/elabtmp.Dockerfile .
            docker build -q --no-cache -t elabtmp -f tests/circleci.Dockerfile .
            docker build -q --no-cache -t elab-cypress -f tests/elab-cypress.Dockerfile .
            printf "ELABFTW_USER=nginx\nELABFTW_GROUP=nginx\nELABFTW_USERID=101\nELABFTW_GROUPID=101\n" > tests/elabftw-user.env
            docker compose --ansi never -f tests/docker-compose.yml up -d --quiet-pull
      - run:
          name: Install JS dependencies
          command: docker exec -it elabtmp yarn install --silent --immutable
      - run:
          name: Build all
          command: docker exec -it elabtmp yarn buildall:dev
      - run:
          name: Run SCSS linter
          command: docker exec -it elabtmp yarn csslint
      - run:
          name: Run Javascript linter
          command: docker exec -it elabtmp yarn jslint-ci:all
      - run:
          name: Composer install
          command: docker exec -it elabtmp composer install --no-progress -q
      - run:
          name: Run PHP-CS-Fixer
          command: docker exec -it elabtmp yarn phpcs-dry
      - run:
          name: Run Twig linter
          command: docker exec -it elabtmp yarn twigcs
      - run:
          name: "PHP static analysis: psalm + phpstan"
          command: docker exec -it elabtmp yarn static
      - run:
          name: Populate the database
          command: docker exec -it elabtmp bin/init db:populate src/tools/populate-config.yml.dist -y
      - run:
          name: Fix permissions
          command: |
            docker exec -it elabtmp mkdir -p cache/purifier/{HTML,CSS,URI} cache/{elab,mpdf,twig}
            docker exec -it elabtmp chown -R nginx:nginx cache
            docker exec -it elabtmp chmod -R 777 cache
            docker exec -it elabtmp chmod -R 777 tests/_output
            docker exec -it elabtmp chown -R nginx:nginx uploads
            docker exec -it elabtmp chmod -R 777 uploads
      - run:
          name: Run unit and apiv2 tests
          command: docker exec -it elabtmp php vendor/bin/codecept run --skip cypress --coverage --coverage-xml --coverage-html
      - run:
          name: Extract coverage report
          command: docker cp elabtmp:/elabftw/tests/_output/coverage.xml .
      - run:
          name: Extract coverage HTML report
          command: docker cp elabtmp:/elabftw/tests/_output/coverage coverage-html
      - run:
          name: Generate the php documentation
          # Note:  --setting=graphs.enabled=true has been removed because the graphs are too large
          command: docker exec -it elabtmp ./phpdoc -i ./cache -i ./uploads -d ./src/ -t phpdoc-html
      - run:
          name: Extract the php documentation
          command: docker cp elabtmp:/elabftw/phpdoc-html phpdoc-html
      - run:
          name: Reset database
          command: docker exec -it elabtmp bin/init db:populate src/tools/populate-config.yml.dist -y
      - run:
          name: Fix permissions
          command: |
            docker exec -it elabtmp mkdir -p cache/purifier/{HTML,CSS,URI} cache/{elab,mpdf,twig}
            docker exec -it elabtmp chown -R nginx:nginx cache
            docker exec -it elabtmp chmod -R 777 cache
            docker exec -it elabtmp chmod -R 777 tests/_output
            docker exec -it elabtmp chown -R nginx:nginx uploads
            docker exec -it elabtmp chmod -R 777 uploads
      - run:
          name: Run Cypress e2e tests and extract artifacts
          # have to save cypress exit code to first extract artifacts
          command: |
            docker exec -it elab-cypress cypress run
            cypressExitCode=$?
            docker cp elab-cypress:/home/node/tests/cypress/screenshots/. cypress/screenshots
            docker cp elab-cypress:/home/node/tests/cypress/videos/. cypress/videos
            # extract coverage reports
            docker cp elabtmp:/elabftw/tests/_output/c3tmp/codecoverage.tar cypress-coverage.tar
            mkdir cypress-coverage-html && tar -xf cypress-coverage.tar -C cypress-coverage-html
            docker cp elabtmp:/elabftw/tests/_output/c3tmp/codecoverage.clover.xml cypress-coverage.clover.xml
            exit "$cypressExitCode"
      - run :
          name: Merge both coverage reports
          command: |
            docker exec -it elabtmp bash /elabftw/tests/merge-coverage-reports.sh
            docker cp elabtmp:/elabftw/tests/_output/merge_cov/coverage-merged.clover.xml .
            docker cp elabtmp:/elabftw/tests/_output/merge_cov/coverage-html-merged .
      - store_artifacts:
          path: phpdoc-html
          destination: phpdoc-html
      - store_artifacts:
          path: coverage-html
          destination: coverage-html
      - codecov/upload:
          file: coverage-merged.clover.xml
      - store_artifacts:
          path: cypress
          destination: cypress
      - store_artifacts:
          path: cypress-coverage-html
          destination: cypress-coverage-html
      - store_artifacts:
          path: cypress-coverage.clover.xml
          destination: cypress-coverage.clover.xml
      - store_artifacts:
          path: coverage-html-merged
          destination: coverage-html-merged
      - store_artifacts:
          path: coverage-merged.clover.xml
          destination: coverage-merged.clover.xml
workflows:
  version: 2
  build_and_test:
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - demo
                - ird
